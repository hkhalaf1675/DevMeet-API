// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ErrorLogs {
  id        Int      @id @default(autoincrement())
  error     Json
  position  Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model User {
  id              Int       @id @default(autoincrement())
  name            String
  email           String    @unique
  password        String
  nationality     String?
  spokenLanguages String[]
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  slots           Slot[]    @relation("mentorSlots")
  requests        Request[] @relation("requests")
}

model Slot {
  id          Int        @id @default(autoincrement())
  topic       String
  description String?
  status      SlotStatus @default(AVAILABLE)
  location    String? // e.g., "Online", "In-person", "Zoom", etc.
  startTime   DateTime
  endTime     DateTime
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  mentorId    Int
  mentor      User       @relation("mentorSlots", fields: [mentorId], references: [id])
  requests    Request[]  @relation("slotRequests")
}

model Request {
  id          Int           @id @default(autoincrement())
  status      RequestStatus @default(PENDING)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  developerId Int
  developer   User          @relation("requests", fields: [developerId], references: [id])
  slotId      Int
  slot        Slot          @relation("slotRequests", fields: [slotId], references: [id])
}

enum SlotStatus {
  AVAILABLE
  BOOKED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  CANCELLED
  DECLINED
}
